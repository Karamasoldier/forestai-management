#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemple d'utilisation de l'ExploitantAgent pour la gestion des op√©rations foresti√®res.

Ce script d√©montre comment utiliser l'ExploitantAgent pour g√©rer les exploitants 
forestiers, planifier des op√©rations et √©valuer les performances.

Usage:
    python exploitant_agent_example.py
"""

import logging
import json
from datetime import datetime, timedelta
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Import de ForestAI
from forestai.agents.exploitant_agent import ExploitantAgent

# Dossier pour sauvegarder les r√©sultats
OUTPUT_DIR = Path("./outputs")
OUTPUT_DIR.mkdir(exist_ok=True)

def manage_operators_example():
    """Exemple de gestion des op√©rateurs forestiers."""
    print("\nüå≥ Exemple de gestion des op√©rateurs forestiers")
    
    # Initialiser l'ExploitantAgent
    agent = ExploitantAgent()
    
    # R√©cup√©rer la liste des op√©rateurs
    print("\nüìã Liste des op√©rateurs enregistr√©s:")
    result = agent.execute_action("get_operators", {})
    
    if result.get("status") == "success":
        operators = result.get("result", {}).get("operators", [])
        print(f"  ‚Ä¢ {len(operators)} op√©rateurs trouv√©s")
        for operator in operators:
            print(f"    - {operator['name']} ({operator['type']})")
    else:
        print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # Ajouter un nouvel op√©rateur
    print("\n‚ûï Ajout d'un nouvel op√©rateur:")
    new_operator = {
        "name": "Forestiers Associ√©s",
        "type": "ENTREPRENEUR_FORESTIER",
        "contact": {
            "name": "Jean Dupont",
            "email": "jean.dupont@example.com",
            "phone": "0123456789",
            "function": "Directeur"
        },
        "address": {
            "line1": "12 Rue des Ch√™nes",
            "postal_code": "75000",
            "city": "Paris",
            "country": "France"
        },
        "siret": "12345678900000",
        "certifications": ["PEFC", "FSC"],
        "specialties": ["Coupe", "D√©bardage", "Travaux sylvicoles"],
        "work_zones": ["√éle-de-France", "Centre-Val de Loire"],
        "equipment": [
            {
                "name": "Abatteuse",
                "type": "Machine",
                "count": 2
            },
            {
                "name": "Porteur",
                "type": "Machine",
                "count": 1
            }
        ]
    }
    
    result = agent.execute_action("add_operator", new_operator)
    
    if result.get("status") == "success":
        operator_id = result.get("result", {}).get("operator_id")
        print(f"‚úÖ Op√©rateur ajout√© avec succ√®s (ID: {operator_id})")
    else:
        print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # R√©cup√©rer les d√©tails d'un op√©rateur
    if result.get("status") == "success":
        operator_id = result.get("result", {}).get("operator_id")
        print(f"\nüîç D√©tails de l'op√©rateur (ID: {operator_id}):")
        
        result = agent.execute_action("get_operator_details", {"operator_id": operator_id})
        
        if result.get("status") == "success":
            operator = result.get("result", {})
            print(f"  ‚Ä¢ Nom: {operator.get('name')}")
            print(f"  ‚Ä¢ Type: {operator.get('type')}")
            print(f"  ‚Ä¢ Contact: {operator.get('contact', {}).get('name')} - {operator.get('contact', {}).get('email')}")
            print(f"  ‚Ä¢ Certifications: {', '.join(operator.get('certification', []))}")
            print(f"  ‚Ä¢ Sp√©cialit√©s: {', '.join(operator.get('specialties', []))}")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # Mettre √† jour un op√©rateur
    if result.get("status") == "success":
        operator_id = result.get("result", {}).get("id")
        print(f"\n‚úèÔ∏è Mise √† jour de l'op√©rateur (ID: {operator_id}):")
        
        update_data = {
            "specialties": ["Coupe", "D√©bardage", "Travaux sylvicoles", "Plantation"],
            "notes": "Op√©rateur tr√®s fiable pour les travaux de plantation."
        }
        
        result = agent.execute_action("update_operator", {"operator_id": operator_id, **update_data})
        
        if result.get("status") == "success":
            print(f"‚úÖ Op√©rateur mis √† jour avec succ√®s")
            print(f"  ‚Ä¢ Sp√©cialit√©s: {', '.join(result.get('result', {}).get('specialties', []))}")
            print(f"  ‚Ä¢ Notes: {result.get('result', {}).get('notes')}")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")


def manage_operations_example():
    """Exemple de gestion des op√©rations foresti√®res."""
    print("\nüå≤ Exemple de gestion des op√©rations foresti√®res")
    
    # Initialiser l'ExploitantAgent
    agent = ExploitantAgent()
    
    # R√©cup√©rer la liste des op√©rations
    print("\nüìã Liste des op√©rations enregistr√©es:")
    result = agent.execute_action("get_operations", {})
    
    if result.get("status") == "success":
        operations = result.get("result", {}).get("operations", [])
        print(f"  ‚Ä¢ {len(operations)} op√©rations trouv√©es")
        for operation in operations:
            print(f"    - {operation['type']} - {operation['status']} - {operation.get('start_date', 'Non planifi√©e')}")
    else:
        print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # Planifier une nouvelle op√©ration
    print("\n‚ûï Planification d'une nouvelle op√©ration:")
    
    # D'abord, r√©cup√©rer un op√©rateur
    result_operators = agent.execute_action("get_operators", {"limit": 1})
    
    if result_operators.get("status") == "success" and result_operators.get("result", {}).get("operators"):
        operator = result_operators.get("result", {}).get("operators", [])[0]
        operator_id = operator.get("id")
        
        # D√©finir les d√©tails de l'op√©ration
        start_date = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
        end_date = (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d")
        
        new_operation = {
            "type": "COUPE_ECLAIRCIE",
            "description": "√âclaircie s√©lective de 30% du volume",
            "operator_id": operator_id,
            "parcel_id": "P001",
            "location": {
                "parcel_id": "P001",
                "area_ha": 15.5,
                "commune": "Fontainebleau",
                "coordinates": {
                    "lat": 48.4,
                    "lon": 2.7
                }
            },
            "schedule": {
                "start_date": start_date,
                "end_date": end_date,
                "estimated_duration_days": 7
            },
            "equipment": ["Abatteuse", "Porteur"],
            "estimated_volume_m3": 350
        }
        
        result = agent.execute_action("schedule_operation", new_operation)
        
        if result.get("status") == "success":
            operation_id = result.get("result", {}).get("operation_id")
            print(f"‚úÖ Op√©ration planifi√©e avec succ√®s (ID: {operation_id})")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    else:
        print("‚ùå Aucun op√©rateur disponible pour planifier une op√©ration")
    
    # R√©cup√©rer les d√©tails d'une op√©ration
    if result.get("status") == "success":
        operation_id = result.get("result", {}).get("operation_id")
        print(f"\nüîç D√©tails de l'op√©ration (ID: {operation_id}):")
        
        result = agent.execute_action("get_operation_details", {"operation_id": operation_id})
        
        if result.get("status") == "success":
            operation = result.get("result", {})
            print(f"  ‚Ä¢ Type: {operation.get('type')}")
            print(f"  ‚Ä¢ Description: {operation.get('description')}")
            print(f"  ‚Ä¢ Statut: {operation.get('status')}")
            print(f"  ‚Ä¢ P√©riode: {operation.get('schedule', {}).get('start_date')} - {operation.get('schedule', {}).get('end_date')}")
            print(f"  ‚Ä¢ Volume estim√©: {operation.get('estimated_volume_m3')} m¬≥")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # Mettre √† jour le statut d'une op√©ration
    if result.get("status") == "success":
        operation_id = result.get("result", {}).get("id")
        print(f"\n‚úèÔ∏è Mise √† jour du statut de l'op√©ration (ID: {operation_id}):")
        
        update_data = {
            "operation_id": operation_id,
            "status": "EN_COURS",
            "comment": "D√©marrage des travaux ce matin"
        }
        
        result = agent.execute_action("update_operation_status", update_data)
        
        if result.get("status") == "success":
            print(f"‚úÖ Statut de l'op√©ration mis √† jour avec succ√®s")
            print(f"  ‚Ä¢ Nouveau statut: {result.get('result', {}).get('current_status')}")
            print(f"  ‚Ä¢ Commentaire: {update_data['comment']}")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")


def evaluate_performance_example():
    """Exemple d'√©valuation des performances."""
    print("\nüèÜ Exemple d'√©valuation des performances")
    
    # Initialiser l'ExploitantAgent
    agent = ExploitantAgent()
    
    # √âvaluer la performance d'une op√©ration
    print("\n‚≠ê √âvaluation de performance d'une op√©ration:")
    
    # D'abord, r√©cup√©rer une op√©ration termin√©e
    result_operations = agent.execute_action("get_operations", {"status": "TERMINEE", "limit": 1})
    
    if result_operations.get("status") == "success" and result_operations.get("result", {}).get("operations"):
        operation = result_operations.get("result", {}).get("operations", [])[0]
        operation_id = operation.get("id")
        
        # D√©finir les d√©tails de l'√©valuation
        evaluation_data = {
            "operation_id": operation_id,
            "scores": [
                {
                    "criteria": "QUALITY",
                    "score": 4.5,
                    "comments": "Tr√®s bonne qualit√© d'ex√©cution"
                },
                {
                    "criteria": "TIMELINESS",
                    "score": 4.0,
                    "comments": "Travaux termin√©s dans les d√©lais"
                },
                {
                    "criteria": "ENVIRONMENTAL_IMPACT",
                    "score": 4.2,
                    "comments": "Bon respect des consignes environnementales"
                },
                {
                    "criteria": "COMPLIANCE",
                    "score": 5.0,
                    "comments": "Parfaite conformit√© avec le cahier des charges"
                }
            ],
            "strengths": [
                "Qualit√© du travail",
                "Respect des consignes environnementales"
            ],
            "areas_for_improvement": [
                "Communication avec le propri√©taire"
            ],
            "recommendations": [
                "Poursuivre la collaboration pour d'autres types de travaux"
            ]
        }
        
        result = agent.execute_action("evaluate_performance", evaluation_data)
        
        if result.get("status") == "success":
            performance_id = result.get("result", {}).get("performance_id")
            print(f"‚úÖ √âvaluation de performance enregistr√©e avec succ√®s (ID: {performance_id})")
            
            scores = result.get("result", {}).get("scores", {})
            print(f"  ‚Ä¢ Score global: {scores.get('overall', 'N/A')}/5")
            for criteria, score in scores.items():
                if criteria != "overall":
                    print(f"  ‚Ä¢ {criteria}: {score}/5")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    else:
        # Utiliser un ID fictif pour l'exemple
        print("‚ÑπÔ∏è Aucune op√©ration termin√©e trouv√©e. Utilisation d'un ID fictif pour l'exemple.")
        
        evaluation_data = {
            "operation_id": "op-example",
            "scores": [
                {
                    "criteria": "QUALITY",
                    "score": 4.5,
                    "comments": "Tr√®s bonne qualit√© d'ex√©cution"
                },
                {
                    "criteria": "TIMELINESS",
                    "score": 4.0,
                    "comments": "Travaux termin√©s dans les d√©lais"
                },
                {
                    "criteria": "ENVIRONMENTAL_IMPACT",
                    "score": 4.2,
                    "comments": "Bon respect des consignes environnementales"
                },
                {
                    "criteria": "COMPLIANCE",
                    "score": 5.0,
                    "comments": "Parfaite conformit√© avec le cahier des charges"
                }
            ],
            "strengths": [
                "Qualit√© du travail",
                "Respect des consignes environnementales"
            ],
            "areas_for_improvement": [
                "Communication avec le propri√©taire"
            ],
            "recommendations": [
                "Poursuivre la collaboration pour d'autres types de travaux"
            ]
        }
        
        result = agent.execute_action("evaluate_performance", evaluation_data)
        
        if result.get("status") == "success":
            performance_id = result.get("result", {}).get("performance_id")
            print(f"‚úÖ √âvaluation de performance enregistr√©e avec succ√®s (ID: {performance_id})")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    
    # G√©n√©rer un rapport de performance
    print("\nüìä G√©n√©ration d'un rapport de performance:")
    
    # R√©cup√©rer un op√©rateur
    result_operators = agent.execute_action("get_operators", {"limit": 1})
    
    if result_operators.get("status") == "success" and result_operators.get("result", {}).get("operators"):
        operator = result_operators.get("result", {}).get("operators", [])[0]
        operator_id = operator.get("id")
        
        # D√©finir les param√®tres du rapport
        report_params = {
            "operator_id": operator_id,
            "period_start": (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d"),
            "period_end": datetime.now().strftime("%Y-%m-%d"),
            "formats": ["pdf", "html", "json"]
        }
        
        result = agent.execute_action("generate_performance_report", report_params)
        
        if result.get("status") == "success":
            report_id = result.get("result", {}).get("report_id")
            formats = result.get("result", {}).get("formats", [])
            
            print(f"‚úÖ Rapport de performance g√©n√©r√© avec succ√®s (ID: {report_id})")
            print(f"  ‚Ä¢ Formats disponibles: {', '.join(formats)}")
            
            # Sauvegarder les rapports dans le dossier de sortie
            report_data = result.get("result", {}).get("report_data", {})
            
            # Sauvegarder le rapport JSON pour r√©f√©rence
            report_path = OUTPUT_DIR / f"performance_report_{report_id}.json"
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            print(f"  ‚Ä¢ Rapport sauvegard√© dans: {report_path}")
        else:
            print(f"‚ùå Erreur: {result.get('error_message', 'Erreur inconnue')}")
    else:
        print("‚ùå Aucun op√©rateur disponible pour g√©n√©rer un rapport de performance")


def main():
    """Fonction principale ex√©cutant les exemples."""
    print("üå≥ Exemple d'utilisation de l'ExploitantAgent pour la gestion foresti√®re üå≥")
    
    # Gestion des op√©rateurs
    manage_operators_example()
    
    # Gestion des op√©rations
    manage_operations_example()
    
    # √âvaluation des performances
    evaluate_performance_example()
    
    print("\n‚úÖ D√©monstration termin√©e.")


if __name__ == "__main__":
    main()

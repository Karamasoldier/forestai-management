#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Exemple d'utilisation de l'ExploitantAgent.

Ce script démontre les principales fonctionnalités de l'ExploitantAgent, notamment:
- La gestion des opérateurs forestiers
- La planification et le suivi des interventions sylvicoles
- L'évaluation des performances

Note: Pour exécuter cet exemple, assurez-vous que le package forestai est installé.
"""

import os
import sys
import json
from pprint import pprint
from datetime import datetime, timedelta

# Ajouter le répertoire parent au chemin pour permettre l'importation depuis la racine du projet
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from forestai.agents.exploitant_agent.exploitant_agent import ExploitantAgent

def print_section(title):
    """Imprime un titre de section formaté."""
    print("\n" + "=" * 80)
    print(f" {title} ".center(80, "="))
    print("=" * 80 + "\n")

def run_example():
    """Exécute un exemple complet d'utilisation de l'ExploitantAgent."""
    
    print_section("Initialisation de l'ExploitantAgent")
    # Initialiser l'agent
    exploitant_agent = ExploitantAgent()
    print("L'ExploitantAgent a été initialisé avec succès.")
    
    # Démonstration de la gestion des opérateurs
    print_section("Gestion des opérateurs forestiers")
    
    # Ajouter un opérateur
    operator_data = {
        "name": "Entreprise Forestière Durand",
        "type": "ENTREPRENEUR_FORESTIER",
        "contact": {
            "name": "Jean Durand",
            "email": "contact@ef-durand.fr",
            "phone": "01 23 45 67 89",
            "mobile": "06 12 34 56 78",
            "function": "Gérant"
        },
        "address": {
            "line1": "15 rue des Chênes",
            "line2": "ZA du Bois",
            "postal_code": "45000",
            "city": "Orléans",
            "country": "France"
        },
        "siret": "12345678900012",
        "vat_number": "FR12345678900",
        "website": "https://www.ef-durand.fr",
        "certifications": ["PEFC", "ETF Gestion Durable"],
        "specialties": ["Coupe d'éclaircie", "Débardage", "Travaux sylvicoles"],
        "work_zones": ["Centre-Val de Loire", "Bourgogne-Franche-Comté"],
        "equipment": [
            {
                "name": "Abatteuse Ponsse Ergo",
                "type": "Abatteuse",
                "description": "Abatteuse à roues avec tête d'abattage",
                "capacity": "Diamètre max 60cm",
                "count": 2
            },
            {
                "name": "Porteur John Deere 1510G",
                "type": "Porteur",
                "description": "Porteur forestier 8 roues",
                "capacity": "15 tonnes",
                "count": 1
            }
        ],
        "notes": "Entreprise familiale fondée en 1985, spécialisée dans l'exploitation forestière de feuillus.",
        "tags": ["exploitation", "feuillus", "région Centre"]
    }
    
    result = exploitant_agent.add_operator(operator_data)
    if result["status"] == "success":
        print(f"Opérateur ajouté avec succès: {result['result']['message']}")
        operator_id = result["result"]["operator_id"]
    else:
        print(f"Erreur lors de l'ajout de l'opérateur: {result['error_message']}")
        operator_id = "op-00000001"  # ID fictif pour la suite de l'exemple
    
    # Récupérer les détails de l'opérateur
    result = exploitant_agent.get_operator_details({"operator_id": operator_id})
    if result["status"] == "success":
        print("\nDétails de l'opérateur:")
        print(f"Nom: {result['result']['name']}")
        print(f"Type: {result['result']['type']}")
        print(f"Contact: {result['result']['contact']['name']} ({result['result']['contact']['email']})")
        print(f"Certifications: {', '.join(result['result']['certifications'])}")
        print(f"Spécialités: {', '.join(result['result']['specialties'])}")
    else:
        print(f"Erreur lors de la récupération des détails de l'opérateur: {result['error_message']}")
    
    # Démonstration de la gestion des opérations
    print_section("Gestion des opérations forestières")
    
    # Planifier une opération
    operation_data = {
        "type": "COUPE_ECLAIRCIE",
        "description": "Éclaircie sélective de 30% dans le peuplement de chênes",
        "operator_id": operator_id,
        "parcel_id": "P1234",
        "area_ha": 15.5,
        "commune": "Saint-Martin-d'Auxigny",
        "lieu_dit": "Bois de la Garde",
        "start_date": (datetime.now() + timedelta(days=15)).strftime("%Y-%m-%d"),
        "end_date": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
        "estimated_duration_days": 15,
        "equipment": ["Abatteuse", "Porteur"],
        "estimated_volume_m3": 350,
        "notes": "Privilégier les chênes d'avenir, préserver les arbres marqués en bleu."
    }
    
    result = exploitant_agent.schedule_operation(operation_data)
    if result["status"] == "success":
        print(f"Opération planifiée avec succès: {result['result']['message']}")
        operation_id = result["result"]["operation_id"]
    else:
        print(f"Erreur lors de la planification de l'opération: {result['error_message']}")
        operation_id = "op-00000001"  # ID fictif pour la suite de l'exemple
    
    # Récupérer les détails de l'opération
    result = exploitant_agent.get_operation_details({"operation_id": operation_id})
    if result["status"] == "success":
        print("\nDétails de l'opération:")
        print(f"Type: {result['result']['type']}")
        print(f"Statut: {result['result']['status']}")
        print(f"Parcelle: {result['result']['location']['parcel_id']} ({result['result']['location']['area_ha']} ha)")
        print(f"Période: {result['result']['schedule']['start_date']} au {result['result']['schedule']['end_date']}")
        print(f"Volume estimé: {result['result']['estimated_volume_m3']} m³")
    else:
        print(f"Erreur lors de la récupération des détails de l'opération: {result['error_message']}")
    
    # Mettre à jour le statut de l'opération
    update_data = {
        "operation_id": operation_id,
        "status": "EN_COURS",
        "comment": "Début des travaux avec léger retard dû aux conditions météo",
        "user": "Sophie Martin (Gestionnaire forestier)"
    }
    
    result = exploitant_agent.update_operation_status(update_data)
    if result["status"] == "success":
        print(f"\nStatut de l'opération mis à jour: {result['result']['message']}")
        print(f"Nouveau statut: {result['result']['current_status']}")
    else:
        print(f"Erreur lors de la mise à jour du statut: {result['error_message']}")
    
    # Démonstration des évaluations de performance
    print_section("Évaluation des performances")
    
    # Évaluer la performance d'une opération
    evaluation_data = {
        "operation_id": operation_id,
        "operator_id": operator_id,
        "evaluator": "Sophie Martin (Gestionnaire forestier)",
        "scores": [
            {
                "criteria": "Qualité du travail",
                "score": 4.5,
                "comments": "Très bonne exécution, respect des consignes d'abattage et de préservation des tiges d'avenir."
            },
            {
                "criteria": "Respect des délais",
                "score": 3.8,
                "comments": "Léger retard au démarrage mais a bien rattrapé le temps."
            },
            {
                "criteria": "Impact environnemental",
                "score": 4.6,
                "comments": "Très peu de dégâts au sol, protection des zones sensibles efficace."
            },
            {
                "criteria": "Conformité réglementaire",
                "score": 5.0,
                "comments": "Parfaite conformité avec les aspects réglementaires."
            },
            {
                "criteria": "Communication",
                "score": 4.2,
                "comments": "Bonne communication, réactif aux demandes."
            }
        ],
        "strengths": [
            "Équipe expérimentée et soigneuse",
            "Matériel bien entretenu et adapté",
            "Respect des standards environnementaux élevé"
        ],
        "areas_for_improvement": [
            "Planification des phases de travail à optimiser",
            "Organisation du transport du bois"
        ],
        "recommendations": [
            "Confirmer le planning d'intervention plus en avance",
            "Maintenir l'excellent niveau de respect des normes environnementales"
        ],
        "notes": "Opérateur sérieux, à privilégier pour les futures interventions."
    }
    
    result = exploitant_agent.evaluate_performance(evaluation_data)
    if result["status"] == "success":
        print(f"Évaluation de performance enregistrée: {result['result']['message']}")
        print(f"Score global: {result['result']['overall_score']}")
        evaluation_id = result["result"]["evaluation_id"]
    else:
        print(f"Erreur lors de l'évaluation de performance: {result['error_message']}")
    
    # Générer un rapport de performance
    report_params = {
        "operator_id": operator_id,
        "period_start": (datetime.now() - timedelta(days=180)).isoformat(),
        "period_end": datetime.now().isoformat(),
        "title": "Rapport semestriel de performance - Entreprise Forestière Durand",
        "operations_count": 8,
        "operations_completed": 6
    }
    
    result = exploitant_agent.generate_performance_report(report_params)
    if result["status"] == "success":
        print(f"\nRapport de performance généré: {result['result']['message']}")
        print(f"ID du rapport: {result['result']['report_id']}")
        print(f"Titre: {result['result']['title']}")
        print(f"Période: {result['result']['period']['start']} au {result['result']['period']['end']}")
        if result['result']['recommendations']:
            print("\nRecommandations principales:")
            for rec in result['result']['recommendations']:
                print(f"- {rec}")
    else:
        print(f"Erreur lors de la génération du rapport: {result['error_message']}")
    
    # Recherche d'opérations pour une période spécifique
    print_section("Recherche d'opérations par période")
    
    period_params = {
        "start_date": (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d"),
        "end_date": (datetime.now() + timedelta(days=60)).strftime("%Y-%m-%d")
    }
    
    result = exploitant_agent.get_operations_by_period(period_params)
    if result["status"] == "success":
        print(f"Opérations prévues entre {result['result']['start_date']} et {result['result']['end_date']}:")
        print(f"Nombre d'opérations: {result['result']['count']}")
        if result['result']['operations']:
            for op in result['result']['operations']:
                print(f"- {op['type']} sur la parcelle {op['location']['parcel_id']} ({op['status']})")
    else:
        print(f"Erreur lors de la recherche d'opérations par période: {result['error_message']}")
    
    print_section("Fin de l'exemple")
    print("L'exemple d'utilisation de l'ExploitantAgent est terminé.")

if __name__ == "__main__":
    run_example()
